API RESTFUL - Segue Padrões
JSON - Estrutura de dados utilizada na comunicação entre Front e Back

yarn init - diz que projeto vai ser javascript - cria package.json
primeira dependecia - express

rotas www.osodoçsal.com/{recurso}

const express = require('express'); importa dependecia

const app = express(); - inicializa servidor

app.listen(3333); - define uma porta

app.get('Rota', (req,res) => {
return response.json(); - retorno de resposta do servidor em json
}) - caminho/rota
segundo parametro recebe dois parametros - request(requisição a ser feita),
 response(resposta recebida pela request)


     

arrow function, função porem resumida - () => {} 

dependecia : nodemon - para hot reload quando o arquivo é salvado e atalhos
para executar server 

"scripts" no arquivo package.json - cria atalhos para executar arquivos nodemon

METODOS HTTP:
//get, post, put, delete
obter/ salvar/ editar/ apagar/

PARAMS - formas de enviar dados das requisições
Query Params - request.query - mais Utilizado pelo metodo get (filtros, ordenação, paginação)
Route Params - request.params- mais utilizado no post e delete (fica na rota)
rota/:nomeDoParametro

Body - request.body - Utilizado no put e post mais, para enviar objetos com muitas informações

app.use(express.json()); - fala pro express entender requisições json

endereço do navegador sozinho só faz metodo get

MongoDB - Banco não relacional 
mongoose.connect('endereço mongoose')

const {Router} = require('express'); - sistema de roteamento do express
 module.exports = routes; - exporta rotas

models - guarda entidades a serem salvadas no db

Schema = new mongoose.Schema(objeto representando os campos) - como o objeto é organizado no db mongoose

AXIOS - Faz chamada para outra APIS externas
 
const response = axios.get('url da api a ser usada') - template strings
  async await na requisição: faz o programa aguardar a requisição retornar
completamente até continuar o programa não interrompendo a mesma.

controllers - recebem requisições - realizam salvamento no db ou parecido - retorna resposta

module.exports - quando se modulariza funções etc

const dev = await Dev.findOne({ github_username }); - verifica duplicidade
no banco de dados pelo username

//index, show, store, update, destroy - funções usuais controller

const devs = await Dev.find(); - retorna todos registros do db
